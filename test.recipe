def $state 27;
def @returns;
def @callStack;
def @heap;
def @antiHeap;
@heap.push 84;
@heap.push 72;
@heap.push 82;
@heap.push 69;
@heap.push 69;
@heap.push 84;
@heap.push 87;
@heap.push 79;
@heap.push 79;
@heap.push 78;
@heap.push 69;
@heap.push 71;
@heap.push 79;
def $heapSize 13;
def $lenp0t3835fb9a99cb65f;
def $datap0te0817028a09f276f;
def $arrp0tf8c9795a956fca77;
def $arrp1tc00fc535bcf82a14;
def $inputp0t4c97fbf64dbd8590;
def $otherp0tfc066b0bcdf83979;
def $otherp1t6a07db3923287d83;
def $startp0tf778f5eb988d9485;
def $sp0t91419edebdfdce28;
def $sp1t958e76a0a98d86b1;
def $ip0t1379712ad199d52b;
def $jp0taf19ce4610435e8b;
def $inputp0tb0c4cafe87d74a36;
def $inputp1t65c6c6d8c910f189;
def $startIndexp0t598b1fb555422448;
def $threep0t9961e1827f940e94;
def $twop0t291cd908e276b75e;
def $onep0t41633e7e94877e58;
def $gop0tb0834b05a04c61a1;
@returns.push 0;
while $state {
  push $state;
  eq 1;
  if {
    def $indexp0t9ce84fd87bec8fd0;
    def $sp0t8bc07788b2be1cea;
    def $sp1t1641acfbaf78711b;
    def $ptrp0te564ff607741040d;
    def $offsetp0tc3ef3a3e11c8bd51;
    def $ptrp0tf8b2498900d30213;
    pop $indexp0t9ce84fd87bec8fd0;
    pop $sp1t1641acfbaf78711b;
    pop $sp0t8bc07788b2be1cea;
    push $sp0t8bc07788b2be1cea;
    push $indexp0t9ce84fd87bec8fd0;
    pop $offsetp0tc3ef3a3e11c8bd51;
    pop $ptrp0tf8b2498900d30213;
    push $ptrp0tf8b2498900d30213;
    add $offsetp0tc3ef3a3e11c8bd51;
    pop $ptrp0te564ff607741040d;
    push $ptrp0te564ff607741040d;
    def $ptr;
    pop $ptr;
    def $tempDeref;
    push $heapSize;
    sub $ptr;
    del $ptr;
    def $moved;
    clone $moved;
    for {
    @heap.pop $tempDeref;
    @antiHeap.push $tempDeref;
    };
    @antiHeap.pop $tempDeref;
    push $tempDeref;
    @heap.push $tempDeref;
    push $moved;
    sub 1;
    for {
    @antiHeap.pop $tempDeref;
    @heap.push $tempDeref;
    };
    del $moved;
    del $tempDeref;
    del $offsetp0tc3ef3a3e11c8bd51;
    del $ptrp0tf8b2498900d30213;
    del $indexp0t9ce84fd87bec8fd0;
    del $sp0t8bc07788b2be1cea;
    del $sp1t1641acfbaf78711b;
    del $ptrp0te564ff607741040d;
    @returns.pop $state;
  };
  push $state;
  eq 2;
  if {
    def $np0td92ef1edfa6a4717;
    def $amountp0tc7513db311c813a8;
    def $ptrp0tdcfd645033b5cc21;
    pop $np0td92ef1edfa6a4717;
    push $np0td92ef1edfa6a4717;
    mul 1;
    pop $amountp0tc7513db311c813a8;
    push $heapSize;
    pop $ptrp0tdcfd645033b5cc21;
    push $amountp0tc7513db311c813a8;
    for {
        @heap.push 0;
        inc $heapSize;
    };
    push $ptrp0tdcfd645033b5cc21;
    del $np0td92ef1edfa6a4717;
    del $amountp0tc7513db311c813a8;
    del $ptrp0tdcfd645033b5cc21;
    @returns.pop $state;
  };
  push $state;
  eq 3;
  if {
    pop $lenp0t3835fb9a99cb65f;
    push $lenp0t3835fb9a99cb65f;
    @callStack.push $lenp0t3835fb9a99cb65f;
    @returns.push 4;
    push 2;
    pop $state;
  };
  push $state;
  eq 4;
  if {
    @callStack.pop $lenp0t3835fb9a99cb65f;
    pop $datap0te0817028a09f276f;
    push $datap0te0817028a09f276f;
    push $lenp0t3835fb9a99cb65f;
    @returns.pop $state;
  };
  push $state;
  eq 5;
  if {
    push 0;
    @returns.push 6;
    push 3;
    pop $state;
  };
  push $state;
  eq 6;
  if {
    pop $arrp1tc00fc535bcf82a14;
    pop $arrp0tf8c9795a956fca77;
    push 7;
    pop $state;
  };
  push $state;
  eq 7;
  if {
    push 1;
    def $cond;
    pop $cond;
    push $cond;
    mul 8;
    push 1;
    sub $cond;
    mul 10;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 8;
  if {
    def $ip0te74cd9f7bef38753;
    read $ip0te74cd9f7bef38753;
    push $ip0te74cd9f7bef38753;
    pop $inputp0t4c97fbf64dbd8590;
    not $inputp0t4c97fbf64dbd8590;
    del $ip0te74cd9f7bef38753;
    def $cond;
    pop $cond;
    push $cond;
    mul 9;
    push 1;
    sub $cond;
    mul 11;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 9;
  if {
    push 10;
    pop $state;
  };
  push $state;
  eq 10;
  if {
    push $arrp0tf8c9795a956fca77;
    push $arrp1tc00fc535bcf82a14;
    @returns.pop $state;
  };
  push $state;
  eq 11;
  if {
    push $inputp0t4c97fbf64dbd8590;
    gt 96;
    def $cond;
    pop $cond;
    push $cond;
    mul 12;
    push 1;
    sub $cond;
    mul 13;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 12;
  if {
    push $inputp0t4c97fbf64dbd8590;
    sub 32;
    pop $inputp0t4c97fbf64dbd8590;
    push 13;
    pop $state;
  };
  push $state;
  eq 13;
  if {
    @heap.push $inputp0t4c97fbf64dbd8590;
    inc $heapSize;
    push $arrp0tf8c9795a956fca77;
    push $arrp1tc00fc535bcf82a14;
    add 1;
    pop $arrp1tc00fc535bcf82a14;
    pop $arrp0tf8c9795a956fca77;
    push 7;
    pop $state;
  };
  push $state;
  eq 14;
  if {
    pop $otherp1t6a07db3923287d83;
    pop $otherp0tfc066b0bcdf83979;
    pop $startp0tf778f5eb988d9485;
    pop $sp1t958e76a0a98d86b1;
    pop $sp0t91419edebdfdce28;
    push $startp0tf778f5eb988d9485;
    pop $ip0t1379712ad199d52b;
    push 15;
    pop $state;
  };
  push $state;
  eq 15;
  if {
    push $ip0t1379712ad199d52b;
    lt $sp1t958e76a0a98d86b1;
    def $cond;
    pop $cond;
    push $cond;
    mul 16;
    push 1;
    sub $cond;
    mul 26;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 16;
  if {
    push 0;
    pop $jp0taf19ce4610435e8b;
    push 17;
    pop $state;
  };
  push $state;
  eq 17;
  if {
    push $jp0taf19ce4610435e8b;
    lt $otherp1t6a07db3923287d83;
    def $cond;
    pop $cond;
    push $cond;
    mul 18;
    push 1;
    sub $cond;
    mul 22;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 18;
  if {
    push $sp0t91419edebdfdce28;
    push $sp1t958e76a0a98d86b1;
    push $ip0t1379712ad199d52b;
    add $jp0taf19ce4610435e8b;
    @callStack.push $jp0taf19ce4610435e8b;
    @callStack.push $otherp0tfc066b0bcdf83979;
    @callStack.push $otherp1t6a07db3923287d83;
    @callStack.push $startp0tf778f5eb988d9485;
    @callStack.push $sp0t91419edebdfdce28;
    @callStack.push $sp1t958e76a0a98d86b1;
    @callStack.push $ip0t1379712ad199d52b;
    @returns.push 19;
    push 1;
    pop $state;
  };
  push $state;
  eq 19;
  if {
    @callStack.pop $ip0t1379712ad199d52b;
    @callStack.pop $sp1t958e76a0a98d86b1;
    @callStack.pop $sp0t91419edebdfdce28;
    @callStack.pop $startp0tf778f5eb988d9485;
    @callStack.pop $otherp1t6a07db3923287d83;
    @callStack.pop $otherp0tfc066b0bcdf83979;
    @callStack.pop $jp0taf19ce4610435e8b;
    push $otherp0tfc066b0bcdf83979;
    push $otherp1t6a07db3923287d83;
    push $jp0taf19ce4610435e8b;
    @callStack.push $jp0taf19ce4610435e8b;
    @callStack.push $otherp0tfc066b0bcdf83979;
    @callStack.push $otherp1t6a07db3923287d83;
    @callStack.push $startp0tf778f5eb988d9485;
    @callStack.push $sp0t91419edebdfdce28;
    @callStack.push $sp1t958e76a0a98d86b1;
    @callStack.push $ip0t1379712ad199d52b;
    @returns.push 20;
    push 1;
    pop $state;
  };
  push $state;
  eq 20;
  if {
    @callStack.pop $ip0t1379712ad199d52b;
    @callStack.pop $sp1t958e76a0a98d86b1;
    @callStack.pop $sp0t91419edebdfdce28;
    @callStack.pop $startp0tf778f5eb988d9485;
    @callStack.pop $otherp1t6a07db3923287d83;
    @callStack.pop $otherp0tfc066b0bcdf83979;
    @callStack.pop $jp0taf19ce4610435e8b;
    eq { nop; };
    not { nop; };
    def $cond;
    pop $cond;
    push $cond;
    mul 21;
    push 1;
    sub $cond;
    mul 25;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 21;
  if {
    push 22;
    pop $state;
  };
  push $state;
  eq 22;
  if {
    push $jp0taf19ce4610435e8b;
    eq $otherp1t6a07db3923287d83;
    def $cond;
    pop $cond;
    push $cond;
    mul 23;
    push 1;
    sub $cond;
    mul 24;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 23;
  if {
    push $ip0t1379712ad199d52b;
    @returns.pop $state;
  };
  push $state;
  eq 24;
  if {
    push $ip0t1379712ad199d52b;
    add 1;
    pop $ip0t1379712ad199d52b;
    push 15;
    pop $state;
  };
  push $state;
  eq 25;
  if {
    push $jp0taf19ce4610435e8b;
    add 1;
    pop $jp0taf19ce4610435e8b;
    push 17;
    pop $state;
  };
  push $state;
  eq 26;
  if {
    neg 1;
    @returns.pop $state;
  };
  push $state;
  eq 27;
  if {
    @returns.push 28;
    push 5;
    pop $state;
  };
  push $state;
  eq 28;
  if {
    pop $inputp1t65c6c6d8c910f189;
    pop $inputp0tb0c4cafe87d74a36;
    push 0;
    pop $startIndexp0t598b1fb555422448;
    push $inputp0tb0c4cafe87d74a36;
    push $inputp1t65c6c6d8c910f189;
    push $startIndexp0t598b1fb555422448;
    push 0;
    push 5;
    @callStack.push $inputp0tb0c4cafe87d74a36;
    @callStack.push $inputp1t65c6c6d8c910f189;
    @callStack.push $startIndexp0t598b1fb555422448;
    @returns.push 29;
    push 14;
    pop $state;
  };
  push $state;
  eq 29;
  if {
    @callStack.pop $startIndexp0t598b1fb555422448;
    @callStack.pop $inputp1t65c6c6d8c910f189;
    @callStack.pop $inputp0tb0c4cafe87d74a36;
    pop $threep0t9961e1827f940e94;
    push $threep0t9961e1827f940e94;
    neg 1;
    eq { nop; };
    def $cond;
    pop $cond;
    push $cond;
    mul 30;
    push 1;
    sub $cond;
    mul 31;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 30;
  if {
    push 0;
    @returns.pop $state;
  };
  push $state;
  eq 31;
  if {
    push $threep0t9961e1827f940e94;
    add 5;
    pop $startIndexp0t598b1fb555422448;
    push $inputp0tb0c4cafe87d74a36;
    push $inputp1t65c6c6d8c910f189;
    push $startIndexp0t598b1fb555422448;
    push 5;
    push 3;
    @callStack.push $inputp0tb0c4cafe87d74a36;
    @callStack.push $inputp1t65c6c6d8c910f189;
    @callStack.push $startIndexp0t598b1fb555422448;
    @callStack.push $threep0t9961e1827f940e94;
    @returns.push 32;
    push 14;
    pop $state;
  };
  push $state;
  eq 32;
  if {
    @callStack.pop $threep0t9961e1827f940e94;
    @callStack.pop $startIndexp0t598b1fb555422448;
    @callStack.pop $inputp1t65c6c6d8c910f189;
    @callStack.pop $inputp0tb0c4cafe87d74a36;
    pop $twop0t291cd908e276b75e;
    push $twop0t291cd908e276b75e;
    neg 1;
    eq { nop; };
    def $cond;
    pop $cond;
    push $cond;
    mul 33;
    push 1;
    sub $cond;
    mul 34;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 33;
  if {
    push 0;
    @returns.pop $state;
  };
  push $state;
  eq 34;
  if {
    push $twop0t291cd908e276b75e;
    add 3;
    pop $startIndexp0t598b1fb555422448;
    push $inputp0tb0c4cafe87d74a36;
    push $inputp1t65c6c6d8c910f189;
    push $startIndexp0t598b1fb555422448;
    push 8;
    push 3;
    @callStack.push $inputp0tb0c4cafe87d74a36;
    @callStack.push $inputp1t65c6c6d8c910f189;
    @callStack.push $startIndexp0t598b1fb555422448;
    @callStack.push $threep0t9961e1827f940e94;
    @callStack.push $twop0t291cd908e276b75e;
    @returns.push 35;
    push 14;
    pop $state;
  };
  push $state;
  eq 35;
  if {
    @callStack.pop $twop0t291cd908e276b75e;
    @callStack.pop $threep0t9961e1827f940e94;
    @callStack.pop $startIndexp0t598b1fb555422448;
    @callStack.pop $inputp1t65c6c6d8c910f189;
    @callStack.pop $inputp0tb0c4cafe87d74a36;
    pop $onep0t41633e7e94877e58;
    push $onep0t41633e7e94877e58;
    neg 1;
    eq { nop; };
    def $cond;
    pop $cond;
    push $cond;
    mul 36;
    push 1;
    sub $cond;
    mul 37;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 36;
  if {
    push 0;
    @returns.pop $state;
  };
  push $state;
  eq 37;
  if {
    push $onep0t41633e7e94877e58;
    add 3;
    pop $startIndexp0t598b1fb555422448;
    push $inputp0tb0c4cafe87d74a36;
    push $inputp1t65c6c6d8c910f189;
    push $startIndexp0t598b1fb555422448;
    push 11;
    push 2;
    @callStack.push $inputp0tb0c4cafe87d74a36;
    @callStack.push $inputp1t65c6c6d8c910f189;
    @callStack.push $startIndexp0t598b1fb555422448;
    @callStack.push $threep0t9961e1827f940e94;
    @callStack.push $twop0t291cd908e276b75e;
    @callStack.push $onep0t41633e7e94877e58;
    @returns.push 38;
    push 14;
    pop $state;
  };
  push $state;
  eq 38;
  if {
    @callStack.pop $onep0t41633e7e94877e58;
    @callStack.pop $twop0t291cd908e276b75e;
    @callStack.pop $threep0t9961e1827f940e94;
    @callStack.pop $startIndexp0t598b1fb555422448;
    @callStack.pop $inputp1t65c6c6d8c910f189;
    @callStack.pop $inputp0tb0c4cafe87d74a36;
    pop $gop0tb0834b05a04c61a1;
    push $gop0tb0834b05a04c61a1;
    neg 1;
    eq { nop; };
    def $cond;
    pop $cond;
    push $cond;
    mul 39;
    push 1;
    sub $cond;
    mul 40;
    add { nop; };
    pop $state;
    del $cond;
  };
  push $state;
  eq 39;
  if {
    push 0;
    @returns.pop $state;
  };
  push $state;
  eq 40;
  if {
    def $ip0t250f44c63cb55566;
    push $gop0tb0834b05a04c61a1;
    add 1;
    pop $ip0t250f44c63cb55566;
    print $ip0t250f44c63cb55566;
    flush;
    push 0;
    del $ip0t250f44c63cb55566;
    @returns.pop $state;
  };
};
